@model Guid

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Tic-Tac-Toe";
}

@section styles {
    <style type="text/css">
        #gameBoard {
            margin-left: auto;
            margin-right: auto;
            text-align: center;
        }
    </style>
}

@section scripts {
    @Scripts.Render("~/bundles/TicTacToeBundle")
    <script type="text/javascript" src="~/signalr/hubs"></script>
    <script type="text/javascript">
        var gameId = "@Model";
        var username = "@User.Identity.Name";

        function viewModel() {
            var self = this;

            self.gameHasStarted = ko.observable(false);

            self.infoMessage = ko.observable();
            self.youInfo = ko.observable();

            self.errorMessage = ko.observable();
            self.errorMessageTimer = null;
        }

        function beginGame() {
            vm.infoMessage(null);
            vm.gameHasStarted(true);
        }

        function squareClicked(x, y, symbol) {
            hub.server.squareClicked(x, y, symbol);
        }

        var hub = $.connection.ticTacToeGameHub;
        hub.client.setAwaitingPlayers = function (players) {
            // called when a player arives in the lobby
            console.log('set awaiting players called (' + JSON.stringify(players) + ')');

            var message = "Waiting for players ";
            for (i = 0; i < players.length; i++) {
                message += players[i];
                if (i != players.length - 1) {
                    message += ",";
                }
            }
            message += " to arrive.";

            vm.infoMessage(message);
        };
        hub.client.beginGame = function(playersInfo) {
            // called when game should be starting
            console.log('begin game called (' + JSON.stringify(playersInfo) + ')');

            var youInfoMessage = "You are ";
            for (i = 0; i < playersInfo.length; i++) {
                var playerInfo = playersInfo[i];
                if (playerInfo.Player == username) {
                    window.board.setPlayerSymbol(playerInfo.Symbol);
                    youInfoMessage += playerInfo.Symbol;
                    break;
                }
            }
            youInfoMessage += "'s. Player order is: ";
            for (i = 0; i < playersInfo.length; i++) {
                youInfoMessage += playersInfo[i].Player;
                if (i != playersInfo.length - 1) {
                    youInfoMessage += ", ";
                }
            }
            vm.youInfo(youInfoMessage);

            beginGame();
        };
        hub.client.restoreState = function (state) {
            // called when a player rejoins a game
            console.log('restore state (' + JSON.stringify(state) + ')');

            window.board.updateBoard(state.Board);
            window.board.setPlayerSymbol(state.Symbol);
            beginGame();
            vm.infoMessage(state.CurrentTurn + "'s turn.");
        };
        hub.client.updateBoard = function (board) {
            // called when the board needs to be refreshed
            console.log('update board called (' + JSON.stringify(board) + ')');

            window.board.updateBoard(board);
        };
        hub.client.setErrorMessage = function (errorMessage) {
            // called when server needs to set an error message
            console.log('set error message called (' + errorMessage + ')');

            if (vm.errorMessageTimer != null) {
                clearTimeout(vm.errorMessageTimer);
            }
            vm.errorMessage(errorMessage);
            vm.errorMessageTimer = setTimeout(function () {
                vm.errorMessage(null);
                vm.errorMessageTimer = null;
            }, 5000);
        };
        hub.client.setPlayerTurn = function (playerName) {
            // called when the current players turn changes
            console.log('set player turn called (' + playerName + ')');

            vm.infoMessage(playerName + "'s turn.");
        };
        hub.client.setDraw = function () {
            // called when the game ends in a draw
            console.log('set draw called');

            window.board.endGame();
        };
        hub.client.setWinner = function (details) {
            // called when a player wins a game
            console.log('set winner called (' + JSON.stringify(details) + ')');
        };

        var vm = new viewModel();
        window.chat.init(vm, hub);
        window.board.init("gameBoard", 250, 250, squareClicked);
        ko.applyBindings(vm);

        $.connection.hub.start().done(function () {
            window.chat.start('tic-tac-toe-' + gameId);
            hub.server.userArrived(gameId);
        });
    </script>
}

<div class="row-fluid" data-bind="visible: !gameHasStarted()">
    @Html.ActionLink("Return to lobby", "Index")
</div>
<div class="row-fluid" data-bind="visible: infoMessage() != null && infoMessage().length > 0">
    <div class="alert alert-info span12">
        <span data-bind="text: infoMessage"></span>
    </div>
</div>
<div class="row-fluid" data-bind="visible: youInfo() != null">
    <div class="alert alert-info span12">
        <span data-bind="text: youInfo"></span>
        <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
</div>
<div class="row-fluid" data-bind="visible: errorMessage() != null">
    <div class="alert alert-error span12">
        <span data-bind="text: errorMessage"></span>
    </div>
</div>
<div class="row-fluid" data-bind="visible: gameHasStarted">
    <div id="gameBoard"></div>
</div>

@Html.Partial("_Chat")