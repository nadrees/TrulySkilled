@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Tic-Tac-Toe Lobby";
}

@section styles {
    <style type="text/css">
        .user-select input[type=radio] {
            margin-top: 0px;
            width: 10%;
        }
        .user-name {
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: 87%;
        }
        .btn {
            margin-bottom: 10px;
        }
    </style>
}

@section scripts {
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("~/bundles/knockout")
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var username = "@User.Identity.Name";

            // ------ View Model ---------
            function challenge(name) {
                var self = this;

                self.name = name;
                self.description = 'You have been challenged by ' + name;

                self.acceptChallenge = function () {
                    console.log('accept challenge clicked');

                    hub.server.acceptChallenge(self.name);
                };
                self.rejectChallenge = function () {
                    console.log('reject challenge clicked');

                    var challenge = findChallengeWithName(self.name);
                    vm.challengesReceived.remove(challenge);
                    hub.server.rejectChallenge(self.name);
                };
            }

            function user(name) {
                var self = this;

                self.name = name;
                self.isSelf = (name == username);
            }

            function viewModel() {
                var self = this;

                self.users = ko.observableArray([]);
                self.selected = ko.observable(null);

                self.challenged = ko.observable(null);
                self.serverReady = ko.observable(false);

                // controlling disabling of challenge button
                self.disableChallenge = ko.computed(function () {
                    var hasChallenged = self.challenged() != null;
                    var hasSelected = self.selected() == null;

                    return hasChallenged || hasSelected;
                }, self);

                // messaging
                self.message = ko.observable();
                self.errorMessage = ko.observable();
                self.errorTimeout = null;

                // incoming challenges
                self.challengesReceived = ko.observableArray([]);
            }

            function findChallengeWithName(name) {
                var challenges = vm.challengesReceived();
                for (i = 0; i < challenges.length; i++) {
                    if (challenges[i].name == name)
                        return challenges[i];
                }
                return null;
            }

            function clearChallengeState() {
                vm.challenged(null);
                vm.selected(null);
                vm.message(null);
            }
            // -------- End View Model -----------

            // -------- Event Handlers -----------
            $("#challenge").click(function () {
                var challengedPlayerName = $("input[name=player]:radio:checked").val();
                console.log('Challenging ' + challengedPlayerName);
                hub.server.challenge(challengedPlayerName);
            });
            $("#info-close").click(function () {
                vm.message(null);
            });
            $("#error-close").click(function () {
                clearTimeout(vm.errorTimeout);
                vm.errorTimeout = null;
                vm.errorMessage(null);
            });
            $("#cancel-challenge").click(function () {
                hub.server.cancelChallenge();
                clearChallengeState();
            });
            // -------- End Event Handlers ---------

            // -------- IO ---------
            var hub = $.connection.gameLobbyHub;
            hub.client.addUsers = function (names) {
                // called when a new user enters the chat room
                console.log('Adding users ' + names);
                $.each(names, function (index, name) {
                    vm.users.push(new user(name));
                });
            };
            hub.client.removeUser = function (name) {
                // called wehn a user leaves the chat room
                console.log('Removing user ' + name);

                var userToRemove = null;
                $.each(vm.users(), function (index, user) {
                    if (user.name == name) {
                        userToRemove = user;
                    }
                });
                if (userToRemove) {
                    vm.users.remove(userToRemove);
                }
            };
            hub.client.addChallenge = function (name) {
                // call when this user recieves a challenge from another user
                console.log('add challenge called (' + name + ')');

                if (findChallengeWithName(name) == null) {
                    var challengeModel = new challenge(name);
                    vm.challengesReceived.push(challengeModel);
                }
            };
            hub.client.challengeSent = function (name) {
                // callback for when this user challenges another user
                console.log('challenge sent called');
                vm.challenged(name);
                vm.message('Challenge sent to ' + name + ', awaiting response...');
            };
            hub.client.cancelChallenge = function (name) {
                // called when another user's challenge was canceled by the other user
                console.log('cancel challenge called (' + name + ')');

                var challenge = findChallengeWithName(name);
                if (challenge != null)
                    vm.challengesReceived.remove(challenge);
            };
            hub.client.rejectChallenge = function () {
                // called when an outstanding challenge is rejected
                console.log('reject challenge called');

                var challengedUser = vm.challenged();

                clearChallengeState();
                vm.errorMessage(challengedUser + ' has rejected your challenge');
                vm.errorTimeout = setTimeout(function () {
                    vm.errorMessage(null);
                    vm.errorTimeout = null;
                }, 5000);
            };
            hub.client.acceptChallenge = function (randomGuid) {
                // called when a challenge is accepted
                console.log('accept challenge called');

                window.location.href = '@Url.Action("Game")' + '/' + randomGuid;
            };
            // ---------- End IO -----------

            var vm = new viewModel();
            window.chat.start(vm, hub);
            ko.applyBindings(vm);

            $.connection.hub.start().done(function () {
                $("#submit").removeAttr('disabled');
                $("#chat-input").removeAttr('disabled');
            });
        });
    </script>
}

<div class="row-fluid">
    <h3 class="span12">Tic-Tac-Toe</h3>
</div>
<!-- ko foreach: challengesReceived -->
<div class="row-fluid">
    <button type="button" class="btn btn-success span2 accept-btn" data-bind="click: acceptChallenge">Accept</button>
    <button type="button" class="btn btn-danger span2 reject-btn" data-bind="click: rejectChallenge">Reject</button>
    <span class="alert alert-info span8" data-bind="text: description" style="margin-top: -5px"></span>
</div>
<!-- /ko -->
<div class="row-fluid" data-bind="visible: errorMessage() != null && errorMessage().length > 0" >
    <div class="alert alert-error span12" id="error-alert">
        <span data-bind="text: errorMessage"></span>
        <button type="button" class="close" id="error-close">&times;</button>
    </div>
</div>
<div class="row-fluid" data-bind="visible: message() != null && message().length > 0">
    <div class="alert alert-info span12">
        <span data-bind="text: message"></span>
        <button type="button" class="close" id="info-close">&times;</button>
    </div>
</div>
<div class="row-fluid">
    <span class="span2">
        <button type="submit" class="btn btn-primary" id="challenge" 
            data-bind="disable: selected() == null, visible: challenged() == null">Challenge</button>
        <button type="button" class="btn btn-danger" id="cancel-challenge" 
            data-bind="visible: challenged() != null">Cancel</button>
    </span>
</div>
<div class="row-fluid">
    <!-- ko foreach: users -->
    <div class="span4 user-select">
        <!-- ko ifnot: isSelf -->
        <input type="radio" name="player" data-bind="attr: { value: name }, checked: $parent.selected" />
        <!-- /ko -->
        <span class="user-name" data-bind="text: name"></span>
    </div>
    <!-- /ko -->
</div>

@Html.Partial("_Chat")